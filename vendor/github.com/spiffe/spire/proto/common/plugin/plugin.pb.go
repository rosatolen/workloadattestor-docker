// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

/*
Package plugin is a generated protocol buffer package.

It is generated from these files:
	plugin.proto

It has these top-level messages:
	ConfigureRequest
	ConfigureResponse
	GetPluginInfoRequest
	GetPluginInfoResponse
	PluginInfoRequest
	PluginInfoReply
	StopRequest
	StopReply
*/
package plugin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// * Represents the plugin-specific configuration string.
type ConfigureRequest struct {
	// * The configuration for the plugin.
	Configuration string `protobuf:"bytes,1,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *ConfigureRequest) Reset()                    { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()               {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigureRequest) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

// * Represents a list of configuration problems
// found in the configuration string.
type ConfigureResponse struct {
	// * A list of errors
	ErrorList []string `protobuf:"bytes,1,rep,name=errorList" json:"errorList,omitempty"`
}

func (m *ConfigureResponse) Reset()                    { *m = ConfigureResponse{} }
func (m *ConfigureResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigureResponse) ProtoMessage()               {}
func (*ConfigureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigureResponse) GetErrorList() []string {
	if m != nil {
		return m.ErrorList
	}
	return nil
}

// * Represents an empty request.
type GetPluginInfoRequest struct {
}

func (m *GetPluginInfoRequest) Reset()                    { *m = GetPluginInfoRequest{} }
func (m *GetPluginInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPluginInfoRequest) ProtoMessage()               {}
func (*GetPluginInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// * Represents the plugin metadata.
type GetPluginInfoResponse struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Category    string `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	DateCreated string `protobuf:"bytes,5,opt,name=dateCreated" json:"dateCreated,omitempty"`
	Location    string `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	Version     string `protobuf:"bytes,7,opt,name=version" json:"version,omitempty"`
	Author      string `protobuf:"bytes,8,opt,name=author" json:"author,omitempty"`
	Company     string `protobuf:"bytes,9,opt,name=company" json:"company,omitempty"`
}

func (m *GetPluginInfoResponse) Reset()                    { *m = GetPluginInfoResponse{} }
func (m *GetPluginInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPluginInfoResponse) ProtoMessage()               {}
func (*GetPluginInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPluginInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPluginInfoResponse) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *GetPluginInfoResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetPluginInfoResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetPluginInfoResponse) GetDateCreated() string {
	if m != nil {
		return m.DateCreated
	}
	return ""
}

func (m *GetPluginInfoResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *GetPluginInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetPluginInfoResponse) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *GetPluginInfoResponse) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

type PluginInfoRequest struct {
}

func (m *PluginInfoRequest) Reset()                    { *m = PluginInfoRequest{} }
func (m *PluginInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PluginInfoRequest) ProtoMessage()               {}
func (*PluginInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PluginInfoReply struct {
	PluginInfo []*GetPluginInfoResponse `protobuf:"bytes,1,rep,name=pluginInfo" json:"pluginInfo,omitempty"`
}

func (m *PluginInfoReply) Reset()                    { *m = PluginInfoReply{} }
func (m *PluginInfoReply) String() string            { return proto.CompactTextString(m) }
func (*PluginInfoReply) ProtoMessage()               {}
func (*PluginInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PluginInfoReply) GetPluginInfo() []*GetPluginInfoResponse {
	if m != nil {
		return m.PluginInfo
	}
	return nil
}

type StopRequest struct {
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StopReply struct {
}

func (m *StopReply) Reset()                    { *m = StopReply{} }
func (m *StopReply) String() string            { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()               {}
func (*StopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*ConfigureRequest)(nil), "spire.common.plugin.ConfigureRequest")
	proto.RegisterType((*ConfigureResponse)(nil), "spire.common.plugin.ConfigureResponse")
	proto.RegisterType((*GetPluginInfoRequest)(nil), "spire.common.plugin.GetPluginInfoRequest")
	proto.RegisterType((*GetPluginInfoResponse)(nil), "spire.common.plugin.GetPluginInfoResponse")
	proto.RegisterType((*PluginInfoRequest)(nil), "spire.common.plugin.PluginInfoRequest")
	proto.RegisterType((*PluginInfoReply)(nil), "spire.common.plugin.PluginInfoReply")
	proto.RegisterType((*StopRequest)(nil), "spire.common.plugin.StopRequest")
	proto.RegisterType((*StopReply)(nil), "spire.common.plugin.StopReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Server service

type ServerClient interface {
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	PluginInfo(ctx context.Context, in *PluginInfoRequest, opts ...grpc.CallOption) (*PluginInfoReply, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := grpc.Invoke(ctx, "/spire.common.plugin.Server/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) PluginInfo(ctx context.Context, in *PluginInfoRequest, opts ...grpc.CallOption) (*PluginInfoReply, error) {
	out := new(PluginInfoReply)
	err := grpc.Invoke(ctx, "/spire.common.plugin.Server/PluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerServer interface {
	Stop(context.Context, *StopRequest) (*StopReply, error)
	PluginInfo(context.Context, *PluginInfoRequest) (*PluginInfoReply, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.common.plugin.Server/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_PluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).PluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.common.plugin.Server/PluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).PluginInfo(ctx, req.(*PluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.common.plugin.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _Server_Stop_Handler,
		},
		{
			MethodName: "PluginInfo",
			Handler:    _Server_PluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

func init() { proto.RegisterFile("plugin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x6a, 0xea, 0x40,
	0x14, 0x26, 0xea, 0x8d, 0xe6, 0xe4, 0xca, 0xbd, 0x8e, 0xf7, 0xca, 0x20, 0xa5, 0x84, 0x20, 0x45,
	0xba, 0x08, 0xd4, 0x6e, 0xba, 0xae, 0x8b, 0xfe, 0xd0, 0x45, 0x89, 0x3b, 0xa1, 0x8b, 0x34, 0x1e,
	0x6d, 0x20, 0x99, 0x99, 0x4e, 0x26, 0x42, 0x9e, 0xa0, 0x6f, 0xd3, 0x67, 0x2c, 0x99, 0x44, 0x4d,
	0x6b, 0x68, 0x77, 0xf3, 0xfd, 0x9c, 0xf9, 0x4e, 0xbe, 0x0c, 0xfc, 0x16, 0x71, 0xb6, 0x89, 0x98,
	0x27, 0x24, 0x57, 0x9c, 0x0c, 0x53, 0x11, 0x49, 0xf4, 0x42, 0x9e, 0x24, 0x9c, 0x79, 0xa5, 0xe4,
	0x5e, 0xc1, 0xdf, 0x39, 0x67, 0xeb, 0x68, 0x93, 0x49, 0xf4, 0xf1, 0x35, 0xc3, 0x54, 0x91, 0x09,
	0xf4, 0xc3, 0x8a, 0x0b, 0x54, 0xc4, 0x19, 0x35, 0x1c, 0x63, 0x6a, 0xf9, 0x9f, 0x49, 0xf7, 0x02,
	0x06, 0xb5, 0xc9, 0x54, 0x70, 0x96, 0x22, 0x39, 0x01, 0x0b, 0xa5, 0xe4, 0xf2, 0x21, 0x4a, 0x15,
	0x35, 0x9c, 0xf6, 0xd4, 0xf2, 0x0f, 0x84, 0x3b, 0x82, 0x7f, 0x37, 0xa8, 0x1e, 0x75, 0xf2, 0x1d,
	0x5b, 0xf3, 0x2a, 0xd0, 0x7d, 0x6b, 0xc1, 0xff, 0x2f, 0x42, 0x75, 0x1f, 0x81, 0x0e, 0x0b, 0x12,
	0xac, 0x36, 0xd0, 0x67, 0x32, 0x86, 0x5e, 0x18, 0x28, 0xdc, 0x70, 0x99, 0xd3, 0x96, 0xe6, 0xf7,
	0xb8, 0xf0, 0xab, 0x5c, 0x20, 0x6d, 0x97, 0xfe, 0xe2, 0x4c, 0x1c, 0xb0, 0x57, 0x98, 0x86, 0x32,
	0x12, 0xfa, 0x63, 0x3a, 0x5a, 0xaa, 0x53, 0xda, 0x11, 0x28, 0x9c, 0x4b, 0x0c, 0x14, 0xae, 0xe8,
	0xaf, 0xca, 0x71, 0xa0, 0x8a, 0xcc, 0x98, 0x87, 0x65, 0x1b, 0x66, 0x99, 0xb9, 0xc3, 0x84, 0x42,
	0x77, 0x8b, 0x32, 0x2d, 0xa4, 0xae, 0x96, 0x76, 0x90, 0x8c, 0xc0, 0x0c, 0x32, 0xf5, 0xc2, 0x25,
	0xed, 0x69, 0xa1, 0x42, 0xc5, 0x44, 0xc8, 0x13, 0x11, 0xb0, 0x9c, 0x5a, 0xe5, 0x44, 0x05, 0xdd,
	0x21, 0x0c, 0x8e, 0xeb, 0x79, 0x82, 0x3f, 0x75, 0x52, 0xc4, 0x39, 0xb9, 0x07, 0x10, 0x7b, 0x4a,
	0x17, 0x6d, 0xcf, 0xce, 0xbd, 0x86, 0x1f, 0xec, 0x35, 0xf6, 0xea, 0xd7, 0xa6, 0xdd, 0x3e, 0xd8,
	0x0b, 0xc5, 0xc5, 0x2e, 0xcd, 0x06, 0xab, 0x84, 0x22, 0xce, 0x67, 0xef, 0x06, 0x98, 0x0b, 0x94,
	0x5b, 0x94, 0xe4, 0x16, 0x3a, 0x05, 0x4f, 0x9c, 0xc6, 0x98, 0xda, 0x0d, 0xe3, 0xd3, 0x6f, 0x1c,
	0xc5, 0xf2, 0x4b, 0x80, 0xc3, 0x4a, 0xe4, 0xac, 0xd1, 0x7d, 0xd4, 0xc2, 0x78, 0xf2, 0xa3, 0x4f,
	0xc4, 0xf9, 0x75, 0x6f, 0x69, 0x96, 0xca, 0xb3, 0xa9, 0x5f, 0xfd, 0xe5, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xac, 0x16, 0x4f, 0x0b, 0x05, 0x03, 0x00, 0x00,
}
