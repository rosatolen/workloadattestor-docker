// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_noderesolver is a generated GoMock package.
package mock_noderesolver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/spiffe/spire/proto/common"
	plugin "github.com/spiffe/spire/proto/common/plugin"
)

// MockNodeResolver is a mock of NodeResolver interface
type MockNodeResolver struct {
	ctrl     *gomock.Controller
	recorder *MockNodeResolverMockRecorder
}

// MockNodeResolverMockRecorder is the mock recorder for MockNodeResolver
type MockNodeResolverMockRecorder struct {
	mock *MockNodeResolver
}

// NewMockNodeResolver creates a new mock instance
func NewMockNodeResolver(ctrl *gomock.Controller) *MockNodeResolver {
	mock := &MockNodeResolver{ctrl: ctrl}
	mock.recorder = &MockNodeResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeResolver) EXPECT() *MockNodeResolverMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockNodeResolver) Configure(arg0 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", arg0)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockNodeResolverMockRecorder) Configure(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockNodeResolver)(nil).Configure), arg0)
}

// GetPluginInfo mocks base method
func (m *MockNodeResolver) GetPluginInfo(arg0 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockNodeResolverMockRecorder) GetPluginInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockNodeResolver)(nil).GetPluginInfo), arg0)
}

// Resolve mocks base method
func (m *MockNodeResolver) Resolve(arg0 []string) (map[string]*common.Selectors, error) {
	ret := m.ctrl.Call(m, "Resolve", arg0)
	ret0, _ := ret[0].(map[string]*common.Selectors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockNodeResolverMockRecorder) Resolve(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockNodeResolver)(nil).Resolve), arg0)
}
